import React, { useState, useEffect } from "react";
import { Link, useParams, useHistory } from "react-router-dom";
import { getGameProgress, updateGameProgress } from "../../api"; // Import API functions
import { animalData } from "../../../dummydata";
import "./LevelsPage.css";

const LevelsPagedoc = () => {
    const { subcategoryId: category, animal } = useParams();
    const history = useHistory();
    const [unlockedLevel, setUnlockedLevel] = useState(1); // ‡∏î‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const [totalLevels, setTotalLevels] = useState(0);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchProgress = async () => {
            try {
                const accessCode = localStorage.getItem("accessCode");
                if (!accessCode) {
                    setError("‡πÑ‡∏°‡πà‡∏û‡∏ö AccessCode ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
                    return;
                }

                const userId = localStorage.getItem("userId"); // ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å localStorage
                if (!userId) {
                    setError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
                    return;
                }

                // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å API
                const progress = await getGameProgress(userId, animal);
                setUnlockedLevel(progress.currentLevel || 1);
            } catch (err) {
                console.error("Failed to fetch progress:", err);
                setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°");
            }
        };

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å dummydata
        const categoryData = animalData.find((cat) => cat.category === category);
        const animalLevels = categoryData?.animals[animal]?.levels;
        if (animalLevels) {
            setTotalLevels(Object.keys(animalLevels).length);
        } else {
            setError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ô‡∏µ‡πâ");
        }

        fetchProgress();
    }, [category, animal]);

    const handleLevelClick = async (level) => {
        if (level > unlockedLevel) {
            alert("‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô!");
            return;
        }

        try {
            const accessCode = localStorage.getItem("accessCode");
            if (!accessCode) {
                alert("‡πÑ‡∏°‡πà‡∏û‡∏ö AccessCode ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
                return;
            }

            const userId = localStorage.getItem("userId");
            if (!userId) {
                alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
                return;
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏î‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
            if (level === unlockedLevel && level < totalLevels) {
                await updateGameProgress(userId, animal, level + 1);
                setUnlockedLevel(level + 1);
            }

            // ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            history.push(`/category/${category}/${animal}/level/${level}/doc`);
        } catch (err) {
            console.error("Error updating game progress:", err);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤");
        }
    };

    const levels = Array.from({ length: totalLevels }, (_, index) => index + 1); // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    return (
        <div className="levels-page">
            {error ? (
                <p className="error-message">{error}</p>
            ) : (
                <>
                    <h2>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {animal}</h2>
                    <div className="levels">
                        {levels.map((level) => (
                            <div
                                key={level}
                                className={`level ${level <= unlockedLevel ? "unlocked" : "locked"}`}
                            >
                                {level <= unlockedLevel ? (
                                    <Link
                                        to="#"
                                        onClick={() => handleLevelClick(level)}
                                    >
                                        {level}
                                    </Link>
                                ) : (
                                    <span>üîí</span>
                                )}
                            </div>
                        ))}
                    </div>
                </>
            )}
        </div>
    );
};

export default LevelsPagedoc;
